Decorators
----------
@- is used to denote Decorators
-used to define metadatas

Lifecycle of Angular
--------------------
constructoe->ngOnInit->Other methods

Data Binding 
------------
ts               -html
componenet       -View

One way Data Binding
-----------------------

1.1 Component to view data sharing
-----------------------------------
   1.1.1 - String Interpolation {{binfingData}}
   1.1.2 -property Binding [propertyName]="bindingData

1.2 View to Component data sharing
----------------------------------
    1.2.1 - Event Binding (eventName)='methodName()' eg:click
    1.2.2 - $event binding (eventName)='methodName($event)' eg:change
    1.2.3 - databinding with template rendering variable #variable

2- Two Way Data Binding
-----------------------
----------------------- 
-FormsModule  - module

2.1 ngModel [(ngModel)]="variable"

package-collection of modules (folder)
module- collection of class (file)
class- collection of variables and methods

Angular Services
----------------
- ng g s serviceFileName

Dependency Injection
--------------------
--> to use methods and data from one class to another class
constructor(accessSpecifier reference:className){

}
         private 
         public 

Angular Routing
----------------
AppRoutingModule - Module used to redirect
Router           - class
navigateByUrl()  - method

href  - routerLink

Form creation in Angular
------------------------
1. template driven form
2. Reactive Form

Reactive Form
-------------
Create A form model in ts
ReactiveFormsModeule - module used to create model form
FormBuilder-class 

Model contain--group,array,control
Regular expression
------------------
used to create validation rules
['rules']

a-z      -small letters
^a-z     -no small letters
a-zA-Z   -capital and small
0-9      -numbers 
\w       -words        
\W       -except words ^0-9a-zA-z

quantifiers
-----------
* min=0   max=infinite
+ min=1   max=infinite

eg: KL07FD1234
   '[K][L][0-9]{2}[A-Z]{2}[0-9]{4}

Directives
----------
 1- Component Directive
 2- Structal Directive  *ngIf *ngFor
 3- Atribute Dierective ngClass

API creation in angular
-----------------------
HttpClientModule - module
HttpClient       - class

methods - 
          get
          post
          put
          patch
          delete

Asynchronous method handling in ts
----------------------------------
js-promise-then()
          -catch()

ts-observable - subscribe()
              - catch()
              
Fund Transfer
Balance check
Transaction history
View profile
Delete Account
Logout

Angular Pipes
-------------
Used to transform data formats

Parent Child Communication
--------------------------

parent to Child
---------------
@Input - decorator used to share data from parent to child

child to parent
---------------
@Output - decorator used to share data from child to parent

event creation
--------------


Pipe creation
-------------

ng g pipe pipeName